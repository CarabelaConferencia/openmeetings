<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 -->
<!DOCTYPE project>
<project name="openmeetings" basedir="./" default="dist"
	xmlns:rat="antlib:org.apache.rat.anttasks"
	xmlns="antlib:org.apache.tools.ant"
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>

	<!-- Sources and output dirs -->
	<property name="main.src.dir" value="${basedir}/src/app" />
	<property name="templates.src.dir" value="${basedir}/src/templates" />
	<property name="test.src.dir" value="${basedir}/src/test" />
	<property name="main.out.dir" value="${basedir}/bin" />

	<!-- Red5 dir -->
	<property name="red5.server.dir" value="red5-1.0.0-r4315" />

	<!-- screen.out.dir -->
	<property name="screen.out.dir" value="${basedir}/screen_compile" />
	<!-- screen.src.dir -->
	<property name="screen.src.dir" value="${basedir}/src/red5-screenshare" />

	<!-- hudson config -->
	<!-- FIXME hardcoded version -->
	<property name="version.number" value="2.0" />
	<property environment="env" />

	<property name="build.number.hudson" value="${env.BUILD_NUMBER}" />
	<property name="build.target" value="/home/swagner/apache-tomcat-6.0.18/webapps/openmeetings/builds/" />

	<!-- Axis2 Services -->
	<property name="fileservice.src.dir" value="${basedir}/src/fileservice" />
	<property name="roomservice.src.dir" value="${basedir}/src/roomservice" />
	<property name="userservice.src.dir" value="${basedir}/src/userservice" />
	<property name="calendarservice.src.dir" value="${basedir}/src/calendarservice" />

	<!-- Doclet Classes -->
	<property name="doclet.src.dir" value="${basedir}/src/docgenerator" />
	<property name="classes.dir" value="${basedir}/bin" />
	<property name="dist.dir" value="dist" />
	<property name="red5.root" value="${dist.dir}/red5" />
	<property name="report.dir" value="${basedir}/junitreport" />
	<property name="derbydb.dir" value="${basedir}/openmeetings" />

	<!-- Conf dirs -->
	<property name="conf.dir" value="${basedir}/conf" />

	<!-- Distribution properties -->
	<property name="project.distname" value="openmeetings" />
	<property name="dist.webapps.dir" value="${dist.dir}/red5/webapps/${project.distname}" />

	<!-- screenshare.out.dir -->
	<property name="screenshare.out.dir" value="${dist.webapps.dir}/red5-screenshare" />
	
	<!-- libraries -->
	<property name="project.lib" value="${basedir}/lib" />

	<!-- LPS Properties -->
	<property name="out.dir.swf" value="${basedir}/${dist.webapps.dir}/" />
	<property name="laszlo.home" value="${basedir}/openlaszlo" />
	<property name="webcontent.src.dir" value="${basedir}/WebContent" />
	<property name="laszlo.as3.src.dir" value="${webcontent.src.dir}/swf10" />
	<property name="laszlo.src.dir" value="${webcontent.src.dir}/src" />
	<property name="laszlo.debug" value="false" />
	<property name="laszlo.proxied" value="solo" />

	<path id="laszlo.lib">
		<!-- swf8 -->
		<fileset dir="${laszlo.home}/WEB-INF/lib" includes="saxon-6.5.3-lz-p1.jar jakarta-regexp-1.2.jar
			commons-collections.jar jdom.jar log4j-1.2.6.jar lps-4.9.0.jar batik-all-flex.jar velocity-dep-1.4-flex.jar" />
		<!-- swf10 -->
		<fileset dir="${laszlo.home}/WEB-INF/lib" includes="mxmlc*.jar flex-messaging-common.jar swfutils.jar asc.jar
			fxgutils.jar" />
	</path>
	
	<property name="red5.lib.dir" value="${project.lib}/red5" />
	<property name="om.lib.dir" value="${project.lib}/om" />
	<property name="anakia.lib.dir" value="${project.lib}/anakia" />
	<property name="red5-screenshare.lib.dir" value="${project.lib}/red5-screenshare" />
	<property name="red5-screenshare.images" value="${basedir}/WebContent/red5-screenshare" />
	<property name="junit.lib.dir" value="${project.lib}/junit" />
	<property name="rat.lib.dir" value="${project.lib}/rat" />
	
	<property name="red5.lib" value="${basedir}/${red5.server.dir}/dist" />
	<property name="red5.server.lib" value="${red5.lib}/lib" />
	<property name="spring.lib" value="${project.lib}/spring" />
	<property name="upload.lib" value="${project.lib}/upload" />
	<property name="xstream.lib" value="${project.lib}/xstream" />
	<property name="web.lib" value="${project.lib}" />
	<!-- Svn Task -->
	<property name="svntask.lib" value="${project.lib}/svntask-1.0.8" />

	<!-- JDK Tools -->
	<property name="jdk.tools" value="${project.lib}/java_16_jdk" />

	<!-- compile classpath -->
	<path id="compile.classpath">
		<fileset dir="${red5.lib.dir}" includes="*.jar" />
		<fileset dir="${om.lib.dir}" includes="*.jar" />
		<fileset dir="${red5.lib}" includes="*.jar" />
		<fileset dir="${red5-screenshare.lib.dir}" includes="*.jar" />
		<fileset dir="${junit.lib.dir}" includes="*.jar" />
		<fileset dir="${project.lib}" includes="*.jar" excludes="ivy*.jar" />
	</path>

	<!-- build artefacts -->
	<target name="dist-bin" description="pack binary distribution" depends="dist">
		<tstamp>
			<format property="build.time" pattern="dd-MM-yyyy_HHmm" />
		</tstamp>
		<property name="archive.file.name" value="${dist.dir}/${project.distname}-${version.number}.r${svn.version}-${build.time}" />
		
		<tar longfile="gnu" compression="gzip" destfile="${archive.file.name}-src.tar.gz">
			<tarfileset dir="${basedir}">
				<include name=".settings/**" />
				<include name="docs/**" />
				<include name="lib/**" />
				<include name="openlaszlo/**" />
				<include name="${red5.server.dir}/**" />
				<include name="src/**" />
				<include name="test/**" />
				<include name="WebContent/**" />
				<include name="xdocs/**" />
				<include name="build.xml" />
				<include name="license.txt" />
			</tarfileset>
		</tar>
		<tar longfile="gnu" compression="gzip" destfile="${archive.file.name}.tar.gz">
			<tarfileset dir="${dist.dir}">
				<include name="red5/**" />
				<exclude name="red5/*.sh" />
			</tarfileset>
			<tarfileset dir="${dist.dir}" filemode="755" >
				<include name="red5/*.sh" />
			</tarfileset>
		</tar>
	</target>
	
	<!-- build webapp -->

	<target name="dist" description="binary distribution of OpenMeetings"
		depends="cleanForBinary, jar, compile.laszlo.main, compile.laszlo.main.as3, enhance, signWebStartJars">
		
		<copy todir="${dist.dir}/red5/lib">
			<fileset dir="${red5.lib.dir}" includes="*.jar" />
		</copy>
		<copy todir="${dist.webapps.dir}/WEB-INF/lib">
			<fileset dir="${om.lib.dir}" includes="*.jar" />
		</copy>

	</target>

	<!-- compiles the sources without the laszlo client -->
	<target name="dist-test" description="binary distribution of OpenMeetings"
		depends="cleanForBinary, jar, signWebStartJars"/>

	<!-- compiles the sources only with laszlo debug client -->
	<target name="dist-debug" description="binary distribution of OpenMeetings"
		depends="cleanForBinary, jar, compile.laszlo.main.debug, compile.laszlo.main.debug.as3, signWebStartJars"/>

	<target name="prepare.mkdir" depends="-java6.check">
		<mkdir dir="${screen.out.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${main.out.dir}" />
		<mkdir dir="${red5.lib.dir}" />
		<mkdir dir="${om.lib.dir}" />
		<mkdir dir="${anakia.lib.dir}" />
		<mkdir dir="${red5-screenshare.lib.dir}" />
		<mkdir dir="${junit.lib.dir}" />
		<mkdir dir="${rat.lib.dir}" />
	</target>

	<condition property="db.provider" value="${db}" else="derby">
		<isset property="db" />
	</condition>

	<!-- Check timestamp on files -->
	<target name="prepare" depends="prepare.mkdir">
		<copy todir="${screenshare.out.dir}" filtering="true">
			<fileset dir="${red5-screenshare.lib.dir}" includes="*.jar" />
			<fileset dir="${red5-screenshare.images}" />
			<fileset dir="${red5.lib.dir}" includes="commons-codec*.jar" />
			<fileset dir="${red5.lib.dir}" includes="httpclient*.jar" />
			<fileset dir="${red5.lib.dir}" includes="httpcore*.jar" />
			<fileset dir="${red5.lib.dir}" includes="bcprov-jdk16*.jar" />
			<fileset dir="${red5.lib.dir}" includes="ehcache-core*.jar" />
			<fileset dir="${red5.lib.dir}" includes="commons-beanutils*.jar" />
			<fileset dir="${red5.server.dir}/dist" includes="red5.jar" />
			<fileset dir="${om.lib.dir}" includes="org.springframework.context-*.jar" />
			<fileset dir="${om.lib.dir}" includes="org.springframework.core-*.jar" />
			<fileset dir="${red5.lib.dir}" includes="logback*.jar" />
			<fileset dir="${red5.lib.dir}" includes="mina-core*.jar" />
			<fileset dir="${red5.lib.dir}" includes="com.springsource.slf4j.api*.jar" />
		</copy>
		<copy todir="${red5.root}" filtering="true">
			<fileset dir="${red5.server.dir}/dist">
				<exclude name="**/*.fla" />
			</fileset>
		</copy>
		<copy todir="${dist.webapps.dir}">
			<fileset dir="${webcontent.src.dir}/openmeetings" />
		</copy>

		<copy todir="${dist.webapps.dir}/WEB-INF/red5-services">
			<fileset dir="${webcontent.src.dir}/WEB-INF/red5-services" includes="*.xml" />
		</copy>
		<copy todir="${dist.webapps.dir}">
			<fileset dir="${webcontent.src.dir}">
				<include name="*.html" />
			</fileset>
		</copy>
		<copy todir="${dist.webapps.dir}/WEB-INF">
			<fileset dir="${webcontent.src.dir}/WEB-INF">
				<include name="*.xml" />
				<include name="*.properties" />
				<exclude name="root-*.xml" />
			</fileset>
		</copy>

		<chmod dir="${dist.dir}/red5" perm="755" includes="**/*.sh" />

		<copy todir="${dist.webapps.dir}/WEB-INF/classes/META-INF">
			<fileset file="src/META-INF/*.xml">
				<exclude name="services.xml" />
			</fileset>
		</copy>
		<copy file="src/META-INF/${db.provider}_persistence.xml" tofile="${dist.webapps.dir}/WEB-INF/classes/META-INF/persistence.xml" />

		<chmod dir="${dist.webapps.dir}/WEB-INF/lib" perm="755" includes="**/*.sh" />

		<!-- add language files from .war version -->
		<copy todir="${dist.webapps.dir}/languages">
			<fileset dir="WebContent/languages" />
		</copy>
		<copy todir="${dist.webapps.dir}/conf">
			<fileset dir="WebContent/conf" />
		</copy>

		<!-- add templates
		<copy todir="${dist.webapps.dir}/WEB-INF/classes">
			<fileset dir="src/templates" />
		</copy>
		 -->

		<tstamp />
	</target>


	<!-- Copy any resource or configuration files -->
	<target name="resources">

		<!-- Main Applications -->
		<copy todir="${main.out.dir}" includeEmptyDirs="yes">
			<fileset dir="${main.src.dir}">
				<patternset>
					<include name="**/*.conf" />
					<include name="**/*.properties" />
					<include name="**/*.xml" />
					<include name="**/*.png" />
					<include name="**/*.vm" />
				</patternset>
			</fileset>
			<fileset dir="${templates.src.dir}">
				<patternset>
					<include name="**/*.conf" />
					<include name="**/*.properties" />
					<include name="**/*.xml" />
					<include name="**/*.png" />
					<include name="**/*.vm" />
				</patternset>
			</fileset>
		</copy>

		<!-- Screen Share Application -->
		<copy todir="${screen.out.dir}" includeEmptyDirs="yes">
			<fileset dir="${screen.src.dir}">
				<patternset>
					<include name="**/*.xml" />
					<include name="**/*.png" />
				</patternset>
			</fileset>
		</copy>

	</target>

	<target name="jar.only" depends="enhance.only, current_revision">
		<tstamp prefix="build">
			<format property="TODAY" pattern="d-MMMM-yyyy" locale="en" />
		</tstamp>
		<manifestclasspath property="jar.classpath" jarfile="${project.distname}.jar">
			<classpath refid="compile.classpath" />
		</manifestclasspath>
		<jar destfile="${dist.webapps.dir}/WEB-INF/lib/${project.distname}.jar">
			<fileset dir="${classes.dir}">
				<include name="**" />
				<exclude name="**/test/**" />
				<exclude name="**/axis/**" />
				<exclude name="**/webstart/**" />
				<exclude name="**/client/**" />
				<exclude name="**/*.png" />
				<exclude name="**/*.vm" />
				<exclude name="log4j.properties" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com" />
				<attribute name="Built-On" value="${build.TODAY}" />
				<attribute name="Class-Path" value="conf/ ${jar.classpath}" />
				<attribute name="Svn-Revision" value="${svn.version}" />
			</manifest>
		</jar>
		<jar destfile="${dist.webapps.dir}/WEB-INF/lib/${project.distname}-templates.jar">
			<fileset dir="${classes.dir}">
				<include name="**" />
				<exclude name="**/org/**" />
				<exclude name="**/*.png" />
				<exclude name="**/*.properties" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com" />
				<attribute name="Built-On" value="${build.TODAY}" />
				<attribute name="Class-Path" value="conf/ ${jar.classpath}" />
			</manifest>
		</jar>
		
		<!-- Build WebServices -->
		<jar destfile="${dist.webapps.dir}/WEB-INF/services/OpenMeetingsService.aar">
			<fileset dir="src/">
				<include name="META-INF/services.xml" />
			</fileset>
		</jar>
		<jar destfile="${dist.webapps.dir}/WEB-INF/lib/openmeetings-WebService.jar">
			<fileset dir="${classes.dir}">
				<include name="**/openmeetings/axis/**" />
			</fileset>
		</jar>
	</target>

	<target name="dist.screen.share" description="Make Screen Share Archive" depends="jar.screen.share, signWebStartJars" />

	<target name="jar.screen.share" description="Make Screen Share Archive" depends="compile.screen.share">
		<tstamp prefix="build">
			<format property="TODAY" pattern="d-MMMM-yyyy" locale="en" />
		</tstamp>
		<manifestclasspath property="jar2.classpath" jarfile="${project.distname}.jar">
			<classpath refid="compile.classpath" />
		</manifestclasspath>
		<!-- Screen Share -->
		<jar destfile="${screenshare.out.dir}/red5-screenshare.jar">
			<fileset dir="${screen.out.dir}">
				<include name="**/**" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="OpenMeetings - http://openmeetings.googlecode.com" />
				<attribute name="Built-On" value="${build.TODAY}" />
				<attribute name="Class-Path" value="conf/ ${jar2.classpath}" />
			</manifest>
		</jar>
	</target>

	<!-- Compile JAR -->
	<target name="jar" description="Make Archive" depends="enhance, build.only.webservice.doc, jar.only, jar.screen.share">
		<tstamp prefix="build">
			<format property="TODAY" pattern="d-MMMM-yyyy" locale="en" />
		</tstamp>
	</target>

	<target name="signWebStartJars">
		<delete file="filetest.keystore" />
		<genkey alias="filetest" storepass="secret" keystore="filetest.keystore" verbose="true">
			<dname>
				<param name="CN" value="Sebastian Wagner" />
				<param name="OU" value="technology" />
				<param name="O" value="openmeetings.googlecode.com" />
				<param name="C" value="DE" />
			</dname>
		</genkey>
		<signjar alias="filetest" keystore="filetest.keystore" storepass="secret" lazy="false">
			<path>
				<fileset dir="${screenshare.out.dir}">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</signjar>
	</target>

	<target name="client.debug.only" depends="compile.laszlo.main.debug.as3,compile.laszlo.main.debug" />

	<target name="compile.laszlo.main.as3" depends="compile.laszlo.main.debug.as3">
		<java classname="org.openlaszlo.compiler.Main" fork="true" newenvironment="true" failonerror="true" dir="${laszlo.as3.src.dir}" classpathref="laszlo.lib">
			<jvmarg value="-DLPS_HOME=${laszlo.home}" />
			<jvmarg value="-Dlzdebug=${laszlo.debug}" />
			<jvmarg value="-Dlzproxied=${laszlo.proxied}" />
			<jvmarg value="-Xms1024M" />
			<jvmarg value="-Xmx1024M" />
			<arg line="--runtime=swf10 --dir ${out.dir.swf} --onerror warn main.as3.lzx" />
		</java>
	</target>

	<target name="compile.laszlo.main.debug.as3">
		<java classname="org.openlaszlo.compiler.Main" fork="true" newenvironment="true" failonerror="true" dir="${laszlo.as3.src.dir}" classpathref="laszlo.lib">
			<jvmarg value="-DLPS_HOME=${laszlo.home}" />
			<jvmarg value="-Dlzdebug=${laszlo.debug}" />
			<jvmarg value="-Dlzproxied=${laszlo.proxied}" />
			<jvmarg value="-Xms1024M" />
			<jvmarg value="-Xmx1024M" />
			<arg line="--runtime=swf10 --dir ${out.dir.swf} --onerror warn maindebug.as3.lzx" />
		</java>
	</target>

	<target name="compile.laszlo.main" depends="compile.laszlo.main.debug">
		<java classname="org.openlaszlo.compiler.Main" fork="true" newenvironment="true" failonerror="true" dir="${laszlo.src.dir}" classpathref="laszlo.lib">
			<jvmarg value="-DLPS_HOME=${laszlo.home}" />
			<jvmarg value="-Dlzdebug=${laszlo.debug}" />
			<jvmarg value="-Dlzproxied=${laszlo.proxied}" />
			<jvmarg value="-Xms1024M" />
			<jvmarg value="-Xmx1024M" />
			<arg line="--runtime=swf8 --dir ${out.dir.swf} --mcache on --onerror warn main.lzx" />
		</java>
	</target>

	<target name="compile.laszlo.main.debug">
		<java classname="org.openlaszlo.compiler.Main" fork="true" newenvironment="true" failonerror="true" dir="${laszlo.src.dir}" classpathref="laszlo.lib">
			<jvmarg value="-DLPS_HOME=${laszlo.home}" />
			<jvmarg value="-Dlzdebug=${laszlo.debug}" />
			<jvmarg value="-Dlzproxied=${laszlo.proxied}" />
			<jvmarg value="-Xms1024M" />
			<jvmarg value="-Xmx1024M" />
			<arg line="--runtime=swf8 --dir ${out.dir.swf} --mcache on --onerror warn maindebug.lzx" />
		</java>
	</target>

	<target name="compile" depends="prepare, compile.only" />

	<target name="compile.only" depends="-retrieve-red5,-retrieve-om,-retrieve-junit,compile.screen.share">
		<echo message="Compile main to ${main.out.dir}">
		</echo>
		<javac debug="on" debuglevel="lines,vars,source" destdir="${main.out.dir}">
			<src path="${main.src.dir}" />
			<classpath refid="compile.classpath" />
			<compilerarg value="-Aopenjpa.metamodel=true" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${doclet.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${templates.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${test.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${fileservice.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${roomservice.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${userservice.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${calendarservice.src.dir}" destdir="${main.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="compile.screen.share" depends="-retrieve-red5-screenshare,clean.classes, prepare.mkdir, resources">
		<echo message="Compile screen share to ${screen.out.dir}" />
		<!-- compile screen share -->
		<javac debug="on" debuglevel="lines,vars,source" srcdir="${screen.src.dir}" destdir="${screen.out.dir}">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="doStartServer" depends="compile">
		<junit>
			<classpath refid="compile.classpath" />
			<formatter type="plain" />

			<test name="org.openmeetings.server.TestSocket" />
		</junit>
	</target>

	<!-- Remove classes directory for clean build -->
	<target name="clean" depends="cleanForBinary" description="Prepare for clean build" />

	<target name="clean.classes" description="Clean Classes">
		<delete dir="${main.out.dir}" />
	</target>

	<target name="cleanForBinary" depends="clean.classes" description="Clean For Binary">
		<delete dir="${dist.dir}" />
		<delete dir="${screen.out.dir}" />
		<delete dir="${report.dir}" />
		<delete dir="${derbydb.dir}" />
		<delete dir="${basedir}/log" />
		<delete file="filetest.keystore" />
		<delete file="derby.log" />
		<delete file="velocity.log" />
	</target>

	<path id="jpa.enhancement.classpath">
		<pathelement path="${classes.dir}" />
		<path refid="compile.classpath" />
	</path>

	<target name="enhance" depends="compile, enhance.only" />

	<target name="enhance.only" depends="compile.only">
		<!-- define the openjpac task -->
		<taskdef name="openjpac" classname="org.apache.openjpa.ant.PCEnhancerTask">
			<classpath refid="jpa.enhancement.classpath" />
		</taskdef>

		<!-- invoke the enhancer -->
		<openjpac>
			<classpath refid="jpa.enhancement.classpath" />
			<config propertiesFile="src/META-INF/${db.provider}_persistence.xml" />
		</openjpac>
		<echo message="Enhancing complete." />
	</target>

	<target name="current_revision">
		<typedef resource="com/googlecode/svntask/svntask.xml">
			<classpath>
				<fileset dir="${svntask.lib}" includes="*.jar" />
			</classpath>
		</typedef>

		<svn>
			<info path="." revisionProperty="svn.version" />
		</svn>

		<!-- Display svn revision number -->
		<echo>Current revision: ${svn.version}</echo>
	</target>

	<!-- Build entire project -->
	<target name="build project" depends="clean, prepare, compile" />

	<target name="report_rat" depends="-retrieve-rat">
		<!-- define the RAT task -->
		<taskdef uri="antlib:org.apache.rat.anttasks" resource="org/apache/rat/anttasks/antlib.xml">
			<classpath>
				<fileset dir="${rat.lib.dir}" includes="*.jar" />
				<path refid="compile.classpath" />
			</classpath>
		</taskdef>

		<rat:report>
			<fileset dir="${main.src.dir}" />
			<fileset dir="${templates.src.dir}" />
			<fileset dir="${test.src.dir}" />
			<fileset dir="${screen.src.dir}" />
			<fileset dir="${fileservice.src.dir}" />
			<fileset dir="${roomservice.src.dir}" />
			<fileset dir="${userservice.src.dir}" />
			<fileset dir="${calendarservice.src.dir}" />
		</rat:report>
	</target>

	<path id="build.webservice.classpath">
		<pathelement path="${classes.dir}" />
		<path refid="compile.classpath" />
	</path>

	<target name="build.webservice.doc" depends="compile.only">
		<javadoc classpathref="build.webservice.classpath">
			<source file="src/userservice/org/openmeetings/axis/services/UserWebService.java" />
			<source file="src/roomservice/org/openmeetings/axis/services/RoomWebService.java" />
			<source file="src/fileservice/org/openmeetings/axis/services/FileWebService.java" />
			<source file="src/calendarservice/org/openmeetings/axis/services/CalendarWebService.java" />
			<doclet name="org.openmeetings.doc.WebServiceDoclet" pathref="build.webservice.classpath">
			</doclet>
		</javadoc>
	</target>

	<property name="docs.dest" value="docs" />
	<property name="docs.src" value="xdocs" />

	<!-- Anakia Build classpath -->
	<path id="anakia.classpath">
		<path refid="compile.classpath" />
		<fileset dir="${anakia.lib.dir}" includes="*.jar" />
		<fileset dir="${red5.lib.dir}" includes="commons-collections*.jar,commons-lang*.jar,velocity*.jar" />
		
	</path>

    <target name="anakia" depends="-retrieve-red5,-retrieve-om,-retrieve-anakia">
    	<taskdef name="anakia" classname="org.apache.velocity.anakia.AnakiaTask">
			<classpath>
				<path refid="anakia.classpath" />
			</classpath>
    	</taskdef>
    	

		<anakia basedir="${docs.src}" destdir="${docs.dest}/" extension=".html" style="./site.vsl" projectFile="stylesheets/project.xml" excludes="**/stylesheets/** empty.xml" includes="**/*.xml" lastModifiedCheck="true" templatePath="xdocs/stylesheets">
		</anakia>
    </target>

	<target name="build.only.webservice.doc" depends="anakia">
		<javadoc classpathref="build.webservice.classpath" useexternalfile="true">
			<source file="src/userservice/org/openmeetings/axis/services/UserWebService.java" />
			<source file="src/roomservice/org/openmeetings/axis/services/RoomWebService.java" />
			<source file="src/fileservice/org/openmeetings/axis/services/FileWebService.java" />
			<source file="src/calendarservice/org/openmeetings/axis/services/CalendarWebService.java" />
			<doclet name="org.openmeetings.doc.WebServiceDoclet" pathref="build.webservice.classpath">
			</doclet>
		</javadoc>

		<copy todir="${docs.dest}/images" filtering="no">
			<fileset dir="${docs.src}/images">
				<include name="**/*.gif" />
				<include name="**/*.jpeg" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
			</fileset>
		</copy>

		<copy todir="${docs.dest}/css" filtering="no">
			<fileset dir="${docs.src}/css">
				<include name="**/*.css" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
			</fileset>
		</copy>

		<copy todir="${dist.webapps.dir}/docs">
			<fileset dir="${basedir}/docs/">
				<include name="*.html" />
				<include name="*.css" />
			</fileset>
		</copy>
		<copy todir="${dist.webapps.dir}/docs/images">
			<fileset dir="${basedir}/docs/images/">
				<include name="**/*.gif" />
				<include name="**/*.jpeg" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
			</fileset>
		</copy>
		<copy todir="${dist.webapps.dir}/docs/css">
			<fileset dir="${basedir}/docs/css/">
				<include name="**/*.css" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
			</fileset>
		</copy>
		<copy todir="${dist.webapps.dir}/docs/js">
            <fileset dir="${basedir}/docs/js/">
                <include name="**/*.js" />
            </fileset>
        </copy>
		<copy todir="${dist.webapps.dir}/docs/source">
            <fileset dir="${basedir}/docs/source/">
                <include name="**/*.js" />
                <include name="**/*.gif" />
                <include name="**/*.png" />
            </fileset>
        </copy>
		<copy todir="${dist.webapps.dir}/docs/source/helpers">
            <fileset dir="${basedir}/docs/source/helpers">
                <include name="**/*.js" />
                <include name="**/*.css" />
                <include name="**/*.png" />
            </fileset>
        </copy>
	</target>

	<!-- Unit Tests -->
	<property name="om.dist.webapp" value="${red5.root}/webapps/${project.distname}" />

	<condition property="junit.test.pattern" value="${testcases}" else="Test*">
		<isset property="testcases" />
	</condition>

	<condition property="junit.test.formatter" value="${test.formatter}" else="xml">
		<!-- plain -->
		<isset property="test.formatter" />
	</condition>

	<path id="junit.classpath">
		<fileset dir="${red5.root}" includes="*.jar" />
		<path refid="compile.classpath" />
		<pathelement path="${classes.dir}" />
		<pathelement path="src" />
		<fileset dir="${red5.root}/lib" includes="*.jar" />
		<fileset dir="${database.lib}" includes="*.jar" />
		<pathelement path="${red5.root}/conf" />
		<pathelement path="${om.dist.webapp}" />
		<pathelement path="${om.dist.webapp}/WEB-INF" />
		<pathelement path="${basedir}/WebContent/WEB-INF" />
	</path>
	<target name="test" depends="enhance" description="Will run all tests unless -Dtestcases=_file_name_pattern_ will be passed">
		<mkdir dir="${report.dir}" />
		<property name="myclsp" refid="junit.classpath" />
		<!--		<echo message="${myclsp}" /> -->
		<junit printsummary="yes">
			<classpath refid="junit.classpath" />
			<jvmarg value="-Dred5.root=${red5.root}" />
			<jvmarg value="-Dred5.config_root=${red5.root}/conf" />
			<jvmarg value="-Dwebapps.root=${basedir}/${om.dist.webapp}" />
			<formatter type="${junit.test.formatter}" />
			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${main.out.dir}">
					<include name="org/openmeetings/test/**/${junit.test.pattern}" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${report.dir}" />
		</junitreport>
	</target>
	<target name="smoke.test" depends="dist" description="Will run 'Smoke' subset of tests">
		<antcall target="test">
			<param name="junit.test.pattern" value="TestSmoke*" />
		</antcall>
	</target>


	<property name="ivy.jar" value="ivy-2.2.0.jar"/>
	<taskdef uri="antlib:org.apache.ivy.ant" resource="org/apache/ivy/ant/antlib.xml"
		classpath="${project.lib}/${ivy.jar}"/>
	<property name="ivy.lib.dir" value="${project.lib}"/>

	<!-- !!!!!!!!!! FIXME !!!!!!!! Check for the main libraries -->

	<!-- Build Targets -->
	<target name="-java6.check">
		<condition property="java6.installed" value="true">
			<and>
               	<equals arg1="${java.specification.version}" arg2="1.6"/>
				<matches string="${java.vm.specification.vendor}" pattern=".*[sun,oracle].*" casesensitive="false"
			           singleline="true"/>
				<available property="java6.installed" classname="javax.script.Bindings"/>
			</and>
		</condition>
		<echo message="Using Java ${java.version} specification: ${java.specification.version}"/>
		<fail message="Unsupported Java version - detected: ${java.version} selected: 1.6. Only Java compiler version 1.6 supported."> 
            <condition> 
            	<not>
                   	<equals arg1="${java6.installed}" arg2="true"/>
            	</not>
            </condition> 
        </fail> 
	</target>
	
	<target name="-retrieve" description="Retrieves the libraries if needed">
		<condition property="ivy.conf.name" value="red5">
			<not>
				<isset property="ivy.conf.name"/>
			</not>
		</condition>
		<condition property="ivy.lib.location" value="${red5.lib.dir}">
			<not>
				<isset property="ivy.lib.location"/>
			</not>
		</condition>
		<condition property="ivy.lib.pattern" value="[artifact]-[revision].[ext]">
			<not>
				<isset property="ivy.lib.pattern"/>
			</not>
		</condition>
		<condition property="ivy.transitive" value="false">
			<not>
				<isset property="ivy.transitive"/>
			</not>
		</condition>
		<echo message="Ivy conf name: ${ivy.conf.name}, destination: ${ivy.lib.location}"/>
		<ivy:resolve file="ivy.xml" conf="${ivy.conf.name}" checkIfChanged="false" transitive="${ivy.transitive}" />
		<ivy:retrieve conf="${ivy.conf.name}" pattern="${ivy.lib.location}/${ivy.lib.pattern}" />
	</target>
	
	<!-- Check for the Red5 libraries -->
	<target name="-retrieve-red5" unless="red5.installed" description="Retrieves the libraries if needed" depends="prepare.mkdir">
		<!-- Ivy configuration - http://ant.apache.org/ivy/history/trunk/ant.html -->
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="red5"/>
			<param name="ivy.lib.location" value="${red5.lib.dir}"/>
		</antcall>
		<jar destfile="${red5.lib.dir}/javaee-api-5.1.2.om.jar">
		    <zipfileset src="${red5.lib.dir}/javaee-api-5.1.2.jar" excludes="javax/persistence/**/*.*"/>
		</jar>
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="red5.ext"/>
			<param name="ivy.lib.location" value="${red5.lib.dir}"/>
			<param name="ivy.lib.pattern" value="[artifact]-[type]-[revision].[ext]"/>
		</antcall>
		<delete>
			<fileset dir="${om.lib.dir}" includes="*-source*.jar"/>
			<fileset dir="${om.lib.dir}" includes="*-javadoc*.jar"/>
		</delete>
		<delete file="${red5.lib.dir}/javaee-api-5.1.2.jar" />
	</target>
	<!-- Check for the Red5 libraries -->
	<target name="-retrieve-om" unless="om.installed" description="Retrieves the libraries if needed" depends="prepare.mkdir">
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="openmeetings"/>
			<param name="ivy.lib.location" value="${om.lib.dir}"/>
		</antcall>
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="openmeetings.ext"/>
			<param name="ivy.lib.location" value="${om.lib.dir}"/>
			<param name="ivy.lib.pattern" value="[artifact]-[type]-[revision].[ext]"/>
		</antcall>
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="openmeetings.axis2"/>
			<param name="ivy.lib.location" value="${om.lib.dir}"/>
			<param name="ivy.lib.pattern" value="[artifact]-[type]-[revision].[ext]"/>
			<param name="ivy.transitive" value="true" />
		</antcall>
		<delete>
			<fileset dir="${om.lib.dir}" includes="*-source*.jar"/>
			<fileset dir="${om.lib.dir}" includes="*-javadoc*.jar"/>
		</delete>
	</target>
	<!-- Check for the Red5 libraries -->
	<target name="-retrieve-anakia" unless="anakia.installed" description="Retrieves the libraries if needed" depends="prepare.mkdir">
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="anakia"/>
			<param name="ivy.lib.location" value="${anakia.lib.dir}"/>
		</antcall>
	</target>
	<!-- Check for red5-screenshare libraries -->
	<target name="-retrieve-red5-screenshare" unless="red5-screenshare.installed" description="Retrieves the libraries if needed" depends="prepare.mkdir">
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="red5-screenshare"/>
			<param name="ivy.lib.location" value="${red5-screenshare.lib.dir}"/>
		</antcall>
	</target>
	<!-- Check for junit libraries -->
	<target name="-retrieve-junit" unless="junit.installed" description="Retrieves the libraries if needed" depends="prepare.mkdir">
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="junit"/>
			<param name="ivy.lib.location" value="${junit.lib.dir}"/>
		</antcall>
	</target>
	<!-- Check for rat libraries -->
	<target name="-retrieve-rat" unless="rat.installed" description="Retrieves the libraries if needed" depends="prepare.mkdir">
		<antcall target="-retrieve" inheritAll="true" inheritRefs="true">
			<param name="ivy.conf.name" value="rat"/>
			<param name="ivy.lib.location" value="${rat.lib.dir}"/>
		</antcall>
	</target>

	<target name="ivyclear" description="Clears out the Ivy cache">
		<delete dir="${user.home}/.ivy2/cache/red5"/>
		<!-- <delete dir="${user.home}/.ivy2/cache/openmeetings"/>FIXME !!!!! do we need this? should it be red5 ???? -->
		<delete includeemptydirs="true">
			<fileset dir="${project.lib}" excludes="*.jar"/>
		</delete>
		<ivy:cleancache/>
	</target>

	<target name="prepare-eclipse" if="java6.installed" description="Build server core" depends="-java6.check">
		<!-- FIXME need to move -->
		<antcall target="-retrieve-red5" inheritAll="true" inheritRefs="true"/>
		<antcall target="-retrieve-om" inheritAll="true" inheritRefs="true"/>
		<antcall target="-retrieve-junit" inheritAll="true" inheritRefs="true"/>
	</target>
</project>
