
Some important terms: 
A rtmp url looks for example like: rtmp://localhost:1935/openmeetings/1

Each part of the URL has a name, so the above URL would mean translated:
rtmp => protocol
localhost => domain/host
1935 => port
openmeetings => webapp
1 => scope

Usually messages are synced only between users that are in the same scope.
So if a user joins a conference room, he will first have to connect via RTMP to 
that scope, so that he can receive messages from that scope.

The goal of the cluster login is: 
  - RTMP traffic is handled via the slave
  - HTTP traffic is handled via the master
  
Clustering HTTP traffic is not the goal of this Master/Slave login. Its all about scaling the 
RTMP traffic.

OpenMeetings has two RTMP connections (as it consists of two SWFs):
One RTMP connection only handles sync(push) notifications and usual remoting (SWF8)
The other RTMP connection is used for audio/video streaming (SWF10)

Cluster conference room login process:

1. All users will initialize the UI component testSetup.lzx, no matter how they join the room (via invitation, via the list of 
conference rooms, or for example via the Calendar UI).

2. In testSetup.lzx the RPC call Conferenceservice::getServerForSession is performed.
   In case getServerForSession returns null, the user stays on the same server.
   He will reconnect but using the same host and port variable just changing the scope.
   
   That means: by default the URL is: rtmp://$MASTER_HOST:$MASTER_PORT/openmeetings/hibernate
   
   In case he stays on the same server he will reconnect to: rtmp://$MASTER_HOST:$MASTER_PORT/openmeetings/$ROOM_ID
   
   In case he connects to a slave, he will use: rtmp://$SLAVE_HOST:$SLAVE_PORT/openmeetings/$ROOM_ID
   
3. In case getServerForSession returns a server object, the address and http-port from the server object is taken, 
as well as the protocol and webapp and the config.xml from the slave is loaded.

4. The config.xml values from the slave are stored to the variables:
	slaveRtmphostlocal  = server object's address (not loaded from config.xml cause this variable is empty by default)
	slaveRtmpport = rtmpport from slave's config.xml 
	slaveRtmpTunnelport = rtmpTunnelport from slave's config.xml 
	slaveRtmpsslport = rtmpsslport from slave's config.xml
	slaveWebAppRootKey = webAppRootKey from slave's config.xml
	
5. The client UI will set the flag (canvas.)"isSlaveHosted" to true (mainAttribues.lzx)

6. hibRtmpConnection.lzx has methods: getHost, getPort, getProtocol, getWebappRootKey that does return different values depending
on if the user is hosted on the slave (isSlaveHosted = true) or not. Based on those methods hibRtmpConnection.lzx does create a 
URL to connect to via rtmp. 

7. This URL is synced to the SWF10 application so that the audio/video part is also using the slave's rtmp(t/s) URL. 

8. The usual login process runs through and the client does reconnect to the new rtmp(t/s) URL.

9. In canvas of SWF8 and SWF10 there is a method "getUrl". All components that upload or download anything via HTTP 
use those methods to get the HTTP URL. In the getUrl method it is always using the rtmphostlocal variable of the 
master, so that all HTTP traffic goes through the master, not the slave.

Cluster conference room logout process:

1. User clicks on "Exit room"

2. isSlaveHosted is set to false, so that when the user reconnects to the scope "hibernate" he will use the master's 
address,port,webapp again.