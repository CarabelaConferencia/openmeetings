<?xml version="1.0" encoding="UTF-8" ?>
<library>

<class name="hibAdapter">

    <attribute name="testingApplication" value="null" />
    <attribute name="baseVideoStream" value="null" />

    <switch>
        <when property="$as3">
            <passthrough>
                import flash.net.LocalConnection;
            </passthrough>
        </when>
    </switch>

    <handler name="oninit"><![CDATA[
        var client = {};
        client.t = this;

        client.hibAdapter_setLabelObjectByHundred = this.hibAdapter_setLabelObjectByHundred;
        client.setRoomValues = this.setRoomValues;
        client.getRoomTypes = this.getRoomTypes;
        client.disconnect = this.disconnect;
        client.reconnectSuccess = this.reconnectSuccess;
        //Test application to record 5 seconds
        client.doInitTestingApplication = this.doInitTestingApplication;
        client.closeInitTestingApplication = this.closeInitTestingApplication;
        //Recording Player
        client.connectRecordingPlayer = this.connectRecordingPlayer;
        client.playRecordingStream = this.playRecordingStream;
        client.updateRecordingVideoPosition = this.updateRecordingVideoPosition;
        client.stopRecordingStream = this.stopRecordingStream;

        var rtmpLC:LocalConnection = new LocalConnection();
        rtmpLC.connect(canvas.rtmp_lc_name);
        if ($debug) Debug.write("Connect to LocalConnection ",canvas.rtmp_lc_name);
        rtmpLC.client=client;
        canvas.setAttribute("rtmp_lc", rtmpLC);
    ]]></handler>

    <method name="hibAdapter_setLabelObjectByHundred" args="start,value">
        // if($debug) Debug.write("hibAdapter_setLabelObjectByHundred",start,value);
        setLabelObjectByHundred(start,value);
    </method>

    <method name="setRoomValues" args="roomtypes_id,rooms_id,value">
        if($debug) Debug.write("setRoomValues",roomtypes_id,rooms_id,value);
        canvas.currentRoomObject = value;
    </method>

    <method name="getRoomTypes" args="value">
        canvas.roomTypesInitValues = value;
    </method>
    
    <method name="reconnectSuccess" args="connection_url,publicSID,userobject">
        if($debug) Debug.write("reconnectSuccess",connection_url,publicSID,userobject);
        canvas.publicSID = publicSID;
        canvas.userobject = userobject;
        canvas.thishib.setAttribute('src',connection_url);
        canvas.thishib.connect();
    </method>
    
    <method name="disconnect" >
        if($debug) Debug.write("Do disconnect");
        canvas.thishib.disconnect();
    </method>
    
    <!---
        Starts the 5 second audio/video testing application and connect to RTMP
     -->
    <method name="doInitTestingApplication" args="x,y,connection_url">
        if($debug) Debug.write("doInitTestingApplication ",x,y);
        canvas.thishib.setAttribute('src',connection_url);
        canvas.thishib.connect();
        this.testingApplication = new lz.testingApplication(canvas,{name:'currentSharing',x:x+1,y:y+24});
    </method>
    
    <!---
        Stops and destroys the view with the audio/video testing application
        and send confirmation back via LocalConnection
     -->
    <method name="closeInitTestingApplication">
    	canvas.thishib.disconnect();
        if($debug) Debug.write("closeInitTestingApplication ");
        if (this.testingApplication != null) {
            this.testingApplication.storeSettings();
            this.testingApplication.destroy();
            this.testingApplication = null;
        }
        if ($debug) Debug.write("Send confirmation of close back to: ",canvas.videoComp_lc_name);
        canvas.videoComp_lc.send(canvas.videoComp_lc_name, 'closeInitTestingApplicationConfirm');
    </method>
    
    <!---
        Initializes video playback component
        and connect to RTMP
     -->
    <method name="connectRecordingPlayer" args="connection_url,x,y,width,height">
    	if($debug) Debug.write("connectRecordingPlayer ", connection_url,x,y,width,height);
    	canvas.thishib.setAttribute('src',connection_url);
        canvas.thishib.connect();
        this.baseVideoStream = new lz.playBackVideoStream(canvas,{
            x:x,
            y:y,
            width:width,
            height:height
        });
    </method> 
    
    <!---
        plays a recorded stream
     -->
    <method name="playRecordingStream" args="streamName,delay,x,y,width,height">
    	if($debug) Debug.write("playRecordingStream ",streamName,x,y,width,height);
    	if (this.baseVideoStream == null) {
    		return;
    	}
    	this.baseVideoStream.setAttribute("x",x);
    	this.baseVideoStream.setAttribute("y",y);
    	this.baseVideoStream.setAttribute("width",width);
    	this.baseVideoStream.setAttribute("height",height);
    	this.baseVideoStream.setAttribute("visibility","visible");
    	this.baseVideoStream.playRecordingStream(streamName,delay);
    </method>
    
    <!---
        Updates the width/height property of the recording playback video 
     -->    
    <method name="updateRecordingVideoPosition" args="width,height">
    	if (this.baseVideoStream == null) {
            return;
        }
        this.baseVideoStream.setAttribute("width",width);
        this.baseVideoStream.setAttribute("height",height);
    </method>
    
    <!---
        stops and hides the recording playback video
     -->
    <method name="stopRecordingStream">
    	if($debug) Debug.write("stopRecordingStream ");
        if (this.baseVideoStream == null) {
            return;
        }
        if($debug) Debug.write(" stopRecording ");
        this.baseVideoStream.stopRecording();
        this.baseVideoStream.setAttribute("visibility","hidden");
    </method>

</class>

<class name="playBackVideoStream" extends="baseVideoStream" bgcolor="0x000000" visibility="hidden">
	
	<attribute name="timerDelegate" value="null"/>
    <attribute name="timerDelegateStarted" value="false" type="boolean"/>
	
	<handler name="oninit">
		this.timerDelegate = new LzDelegate( this, "calcProgressBar" );
	</handler>
	
	<method name="playRecordingStream" args="streamName,delay">
		this.playStream(streamName,delay);
		this.timerDelegateStarted = true;
        lz.Timer.addTimer( this.timerDelegate , 1000 );
	</method>
	
	<method name="stopRecording">
		this._stop();
		lz.Timer.removeTimer(this.timerDelegate);
		this.timerDelegateStarted = false;
	</method>
	
	<handler name="onPlayStatusEvent" args="info">
        if ($debug) Debug.write("onPlayStatusEvent ",info);
        if (info.code ==  "NetStream.Play.Complete" ) {
            canvas.videoComp_lc.send(canvas.videoComp_lc_name, 'stopRecordingStream');
        }
    </handler>
    <handler name="onMetaDataEvent" args="info">
        if ($debug) Debug.write("onMetaData ",info);
    </handler>
    
    <method name="calcProgressBar">
    	if ($debug) Debug.write("calcProgressBar updateRecordingStreamTime",this._ns.time)
    	canvas.videoComp_lc.send(canvas.videoComp_lc_name, 'updateRecordingStreamTime',this._ns.time);
    	if (this.timerDelegateStarted) {
    		lz.Timer.addTimer( this.timerDelegate , 1000 );
    	}
    </method>
	
</class>

</library>