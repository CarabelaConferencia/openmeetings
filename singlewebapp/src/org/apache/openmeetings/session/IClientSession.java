/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License") +  you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.openmeetings.session;

import java.util.Date;

import org.red5.server.api.IClient;

/**
 * holds information about the current rtmp connection.
 * Each rtmp connection has its own {@link IClientSession}.
 * So each conference session might have multiple connections.
 * 
 * There are different implementations of the storage of this object.
 * 
 * @author sebawagner
 *
 */
public interface IClientSession {

	public abstract void setUserObject(Long user_id, String username,
			String firstname, String lastname);

	public abstract void setUserObject(String username, String firstname,
			String lastname);

	public abstract Date getConnectedSince();

	public abstract void setConnectedSince(Date connectedSince);

	/**
	 * true indicates that this user is Moderating
	 * in Events rooms (only 1 Video) this means that this user is currently 
	 * sharing its video/audio
	 * 
	 */
	public abstract Boolean getIsMod();

	public abstract void setIsMod(Boolean isMod);

	/**
	 * login name
	 */
	public abstract String getUsername();

	public abstract void setUsername(String username);

	/**
	 * a unique id generated by red5, this is the FK key and link to the {@link IClient}
	 */
	public abstract String getStreamid();

	public abstract void setStreamid(String streamid);

	public abstract String getScope();

	public abstract void setScope(String scope);

	public abstract String getFormatedDate();

	public abstract void setFormatedDate(String formatedDate);

	public abstract String getUsercolor();

	public abstract void setUsercolor(String usercolor);

	/**
	 * no longer needed since broadCastId is now the new unique id
	 * @deprecated
	 */
	public abstract Integer getUserpos();

	public abstract void setUserpos(Integer userpos);

	/**
	 * client IP
	 */
	// FIXME: Move to {@link ClientSession}
	public abstract String getUserip();

	public abstract void setUserip(String userip);

	public abstract String getSwfurl();

	public abstract void setSwfurl(String swfurl);

	/**
	 * client Port
	 */
	public abstract int getUserport();

	public abstract void setUserport(int userport);

	public abstract String getFirstname();

	public abstract void setFirstname(String firstname);

	public abstract String getLanguage();

	public abstract void setLanguage(String language);

	public abstract String getLastLogin();

	public abstract void setLastLogin(String lastLogin);

	public abstract String getLastname();

	public abstract void setLastname(String lastname);

	public abstract String getMail();

	public abstract void setMail(String mail);

	public abstract String getOfficial_code();

	public abstract void setOfficial_code(String official_code);

	public abstract String getPicture_uri();

	public abstract void setPicture_uri(String picture_uri);

	/**
	 * some vars _not_ directly connected to the user-record from the database
	 * cause a user is not _forced_ to login he can also be an invited user, so user_id
	 * might be null or 0 even if somebody is already in a conference room
	 * 
	 */
	public abstract Long getUser_id();

	public abstract void setUser_id(Long user_id);

	/**
	 * current room id while conferencing
	 */
	public abstract Long getRoom_id();

	public abstract void setRoom_id(Long room_id);

	public abstract Date getRoomEnter();

	public abstract void setRoomEnter(Date roomEnter);

	public abstract Boolean getIsRecording();

	public abstract void setIsRecording(Boolean isRecording);

	public abstract String getRoomRecordingName();

	public abstract void setRoomRecordingName(String roomRecordingName);

	/**
	 * avsettings can be:
	 * av - video and audio
	 * a - audio only
	 * v - video only
	 * n - no av only static Image
	 */
	public abstract String getAvsettings();

	public abstract void setAvsettings(String avsettings);

	/**
	 * this is the id this user is currently using to broadcast a stream
	 * default value is -2 cause otherwise this can due to disconnect
	 */
	public abstract long getBroadCastID();

	public abstract void setBroadCastID(long broadCastID);

	/**
	 * an unique PUBLIC id,
	 * this ID is needed as people can reconnect and will get a new 
	 * streamid, but we need to know if this is still the same user
	 * this Public ID can be changing also if the user does change the 
	 * security token (private SID)
	 * the private  Session ID is not written to the RoomClient-Class
	 * as every instance of the RoomClient is send to all connected users
	 * 
	 * publicSID can be empty if a audio/video user is connected but 
	 * didn't choose any device settings or the connection really just
	 * has been initialized
	 */
	public abstract String getPublicSID();

	public abstract void setPublicSID(String publicSID);

	/**
	 * Zombie Flag
	 * @return
	 */
	public abstract Boolean getZombieCheckFlag();

	public abstract void setZombieCheckFlag(Boolean zombieCheckFlag);

	public abstract Boolean getMicMuted();

	public abstract void setMicMuted(Boolean micMuted);

	public abstract Boolean getCanDraw();

	public abstract void setCanDraw(Boolean canDraw);

	/**
	 * Indicates if this User is broadcasting his stream at all
	 * Only interesting in the Event Modus
	 */
	public abstract Boolean getIsBroadcasting();

	public abstract void setIsBroadcasting(Boolean isBroadcasting);

	public abstract Boolean getCanShare();

	public abstract void setCanShare(Boolean canShare);

	/**
	 * Vars to simulate external Users
	 * @return
	 */
	public abstract String getExternalUserId();

	public abstract void setExternalUserId(String externalUserId);

	/**
	 * Vars to simulate external Users
	 * @return
	 */
	public abstract String getExternalUserType();

	public abstract void setExternalUserType(String externalUserType);

	public abstract Boolean getIsSuperModerator();

	public abstract void setIsSuperModerator(Boolean isSuperModerator);

	public abstract Boolean getIsScreenClient();

	public abstract void setIsScreenClient(Boolean isScreenClient);

	public abstract int getVWidth();

	public abstract void setVWidth(int width);

	public abstract int getVHeight();

	public abstract void setVHeight(int height);

	public abstract int getVX();

	public abstract void setVX(int vx);

	public abstract int getVY();

	public abstract void setVY(int vy);

	/**
	 * StreamPublishName is used in the screen sharing client to publish the stream
	 */
	public abstract String getStreamPublishName();

	public abstract void setStreamPublishName(String streamPublishName);

	public abstract Long getFlvRecordingId();

	public abstract void setFlvRecordingId(Long flvRecordingId);

	public abstract Long getFlvRecordingMetaDataId();

	public abstract void setFlvRecordingMetaDataId(Long flvRecordingMetaDataId);

	public abstract boolean isScreenPublishStarted();

	public abstract void setScreenPublishStarted(boolean screenPublishStarted);

	public abstract Long getOrganization_id();

	public abstract void setOrganization_id(Long organization_id);

	public abstract boolean isStartRecording();

	public abstract void setStartRecording(boolean startRecording);

	public abstract boolean isStartStreaming();

	public abstract void setStartStreaming(boolean startStreaming);

	/**
	 * Session values for handling the Interviwe Room Type
	 * @return
	 */
	public abstract Integer getInterviewPodId();

	public abstract void setInterviewPodId(Integer interviewPodId);

	public abstract Boolean getCanRemote();

	public abstract void setCanRemote(Boolean canRemote);

	public abstract Boolean getCanGiveAudio();

	public abstract void setCanGiveAudio(Boolean canGiveAudio);

	public abstract Boolean getAllowRecording();

	public abstract void setAllowRecording(Boolean allowRecording);

	/**
	 * If true this client is only used to stream audio/video events, 
	 * he should not receive any sync events / push messages <br/>
	 * <br/>
	 * true the user is an audio/video connection<br/>
	 * false the user is a regular user with full session object<br/>
	 * 
	 */
	public abstract boolean getIsAVClient();

	public abstract void setIsAVClient(boolean isAVClient);

	public abstract boolean isStreamPublishStarted();

	public abstract void setStreamPublishStarted(boolean streamPublishStarted);

	/**
	 * To improve our trace log
	 */
	public abstract String toString();

	public abstract boolean isSipTransport();

	public abstract void setSipTransport(boolean sipTransport);

}