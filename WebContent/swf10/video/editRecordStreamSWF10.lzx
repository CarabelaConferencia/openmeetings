<?xml version="1.0" encoding="UTF-8" ?>
<library>
    
<!-- #######################
	Class editRecordStream
	
	Description:
	This Class shows a window where you can alter you Video-/Microphone- Input-Resources
	and start to stream. The app could also use the default values for Cam/Mic but
	must users don't know how to alter this (wether in System-Control-Panel or by Right Clicking
	on the Flash-Screen and *>Preferences>Camera* )
	So I think it is better if Users are forced to choose something from this list
	
 -->
 
<class name="editRecordStreamSWF10"  extends="labelExplorerBox" labelid="51"
	width="300" height="286" x="14" y="-440" >

    <switch>
        <when property="$as3">
            <passthrough>
                import flash.media.Camera;
                import flash.media.Microphone;
                import flash.net.SharedObject;
                import flash.media.SoundCodec;
            </passthrough>
        </when>
    </switch>

    <attribute name="myvideocontainer" value="null" />

    <attribute name="chosenCam" value="null" />
    <attribute name="chosenMic" value="null" />
    <attribute name="chosenSetting" value="null" />
    <attribute name="currentClient" value="null" />

    <attribute name="remoteMessage" value="null" />

    <!---
        if true the user will see the dialog no matter if he has choosen "do not show again" or not
     -->
    <attribute name="isSyncUpdate" value="false" type="boolean" />

    <attribute name="doDefaultAnimation" value="true" type="boolean" />

    <attribute name="isInterview" value="false" type="boolean" />
    
    <attribute name="cam_default_width" value="320" type="number" />
    <attribute name="cam_default_height" value="240" type="number" />

	<handler name="oninit">
		<![CDATA[
			if ($debug) Debug.write("this.myvideocontainer ",this.myvideocontainer);
			if ($debug) Debug.write("editrecordstream ###################### ");

			canvas.videoComp_lc.client = {clb_getBroadCastId: this.clb_getBroadCastId, clb_setUserAVSettings: this.clb_setUserAVSettings};

	        var t:SharedObject = SharedObject.getLocal('userdata');
	        var g = t.data;
	        var save = g["savecamdata"];
	        if ($debug) Debug.write("save: ",save,g["cam"],g["mic"]);
	        //In case its an Audio-Only Room this box should not close automatically
            if ($debug) Debug.write("canvas.currentRoomObject: ", canvas.currentRoomObject);

	        if (false) { // canvas.currentRoomObject.isAudioOnly
	        	this._chooseDeviceAnimation.doStart();
	        } else {
	        	//In case the user presses the Sync Button this box should
                //not close automatically and do the user-prefered values
                if(save && !this.isSyncUpdate && this.checkLocalDataComplete()) {
                    this.chosenCam = g["cam"];
                    this.chosenMic = g["mic"];
                    this.cam_default_width = g["width"];
                    this.cam_default_height = g["height"];
                    this.chosenSetting = g["avstored"];
                    this.remoteMessage = new Array();
                    this.remoteMessage[0] = 'avsettings';
                    this.remoteMessage[2] = this.chosenSetting; 
                    //this.getBroadCastId.doCall();
                    canvas.videoComp_lc.send(canvas.videoComp_lc_name, 'lc_getBroadCastId', this.chosenSetting, this.remoteMessage, this.cam_default_width, this.cam_default_height);
                } else {
                    if (this.doDefaultAnimation) {
                        this._chooseDeviceAnimation.doStart();
                    }
                }
	        }
        ]]>
	</handler>
	
	<method name="checkLocalDataComplete">
        <![CDATA[
            var g = canvas.getUserData();
            if (g["width"] > 0 && g["height"] > 0) {
                return true;
            }
        ]]>
    </method>
    
    
    <netRemoteCallHib name="getBroadCastId" funcname="getBroadCastId"
                      remotecontext="$once{ canvas.thishib }" >

        <handler name="ondata" args="value">
            <![CDATA[
                if ($debug) Debug.write("getBroadCastId",value,canvas.publicSID);
                parent.myvideocontainer = canvas._videoComponent.createVideoObject(canvas.publicSID, true, -1, value);

                if ($debug) Debug.write("parent.setUserAVSettings -1- ",parent.chosenSetting);
                if ($debug) Debug.write("parent.setUserAVSettings -2- ",parent.remoteMessage);
                if ($debug) Debug.write("parent.setUserAVSettings -3- ",parent.cam_default_width);
                if ($debug) Debug.write("parent.setUserAVSettings -4- ",parent.cam_default_height);
                if ($debug) Debug.write("parent.setUserAVSettings -5- ",canvas.currentRoomObject.rooms_id);
                if ($debug) Debug.write("parent.setUserAVSettings -6- ",canvas.publicSID);
                
                parent.setUserAVSettings.doCall();
            ]]>
        </handler>   
    </netRemoteCallHib>  
    
    <netRemoteCallHib name="setUserAVSettings" funcname="setUserAVSettings" 
                      remotecontext="$once{ canvas.thishib }" >  
        <netparam><method name="getValue">return parent.parent.chosenSetting;</method></netparam>
        <netparam><method name="getValue">return parent.parent.remoteMessage;</method></netparam>
        <netparam><method name="getValue">return parent.parent.cam_default_width;</method></netparam>
        <netparam><method name="getValue">return parent.parent.cam_default_height;</method></netparam>
        <netparam><method name="getValue">return parent.parent.cam_default_height;</method></netparam>
        <netparam><method name="getValue">return canvas.publicSID;</method></netparam>
        <handler name="ondata" args="value">
            <![CDATA[
                if ($debug) Debug.write("setUserAVSettings",value);
                parent.currentClient = value;
                parent.doninitalize();
            ]]>
        </handler>   
    </netRemoteCallHib>  

    <!--
        Called by local connection
    <method name="clb_getBroadCastId" args="value">
        if ($debug) Debug.write("getBroadCastId",value,canvas.publicSID);
        this.myvideocontainer = canvas._videoComponent.createVideoObject(canvas.publicSID, true, -1, value);
        this.myvideocontainer.setAttribute("visibility","hidden");
    </method>
    -->

    <!--
        Called by local connection
    <method name="clb_setUserAVSettings" args="value">
        if ($debug) Debug.write("setUserAVSettings",value);
        this.currentClient = value;
        this.doninitalize();
    </method>
    -->
    
    <method name="storelocaldata">
        <![CDATA[
            //Debug.write("sharedobject store ");
            var t:SharedObject = SharedObject.getLocal('userdata');
            var g = t.data;
            if (g==null) g = new Array();
            g["cam"] = this.availibleCams.getValue();
	        g["mic"] = this.availibleMics.getValue();
	        g["avstored"] = this.availibleSettings.getValue();
	        g["savecamdata"] = this.holddatainSO.getValue();
	        g["width"] = this.cam_default_width;
	        g["height"] = this.cam_default_height;
            t.flush();
        ]]>
    </method>

    <method name="doninitalize">
    	<![CDATA[
    	    if ($debug) Debug.write("doninitalize");
    		var valCam = this.chosenCam;
			var valMic = this.chosenMic;
			var settings = this.chosenSetting;
			this.myvideocontainer.setDefaultVideoSize(this.cam_default_width,this.cam_default_height);
            
			var videoview = this.myvideocontainer._chatvideoinner._videostream;
	    	if ($debug) Debug.write("this.myvideocontainer: ",this.myvideocontainer);
	    	if ($debug) Debug.write(valCam,valMic,settings);
			this.myvideocontainer.setAttribute('isremote',false);

			var _micro = null;
			var _camera = null;
			if (valMic != null) {
			     _micro = Microphone.getMicrophone(valMic);
			     if (_micro != null) {
				     _micro.codec = SoundCodec.SPEEX;
				     _micro.framesPerPacket = 1;
				     _micro.setSilenceLevel(0, 2000);
				     _micro.gain = 50;
				     // this has no effect if enhanced microphone is obtained
	                //Microphone setUseEchoSupression(bool)
	                _micro.setUseEchoSuppression(true);
	            }
			}
			if (valCam != null) {
				_camera = Camera.getCamera(valCam);
			}
			
			if ($debug) Debug.write("_camera.setMode: ",videoview.width,videoview.height,canvas.framesPerSecond,true);

			//Microphone.set
			if ($debug) Debug.write("canvas.vaquality: ",canvas.vaquality, "canvas.microphoneRateBest: ",canvas.microphoneRateBest);
			if (_camera != null) {
   				if ($debug) Debug.write("_camera.setQuality BEST: ",this.isInterview,(canvas.bandwidthNeededBest*2),canvas.camQualityBest);
   				if (this.isInterview) {
   					_camera.setMode(videoview.width,videoview.height,24,true);
   					if ($debug) Debug.warn("IS INTERVIEW ");
   				    _camera.setQuality(0,98);
   				} else {
   					_camera.setMode(videoview.width,videoview.height,canvas.framesPerSecond,true);
   					if ($debug) Debug.warn("IS NO INTERVIEW ");
   					_camera.setQuality(canvas.bandwidthNeededBest,canvas.camQualityBest);
   				}
			}

			

            if ($debug) Debug.write("settings: ", settings);
            if ($debug) Debug.write("BroadcastId: ", this.currentClient.broadCastID);
	    	switch (settings){
                case "s":
                    this.myvideocontainer.setAttribute("visibility","hidden");
                    break;
                case "vs":
                    videoview.broadcast(this.currentClient.broadCastID,_camera,null);
                    if(isInterview) {
                        canvas.videoComp_lc.send(canvas.videoComp_lc_name, "onStartBroadcast", this.currentClient.broadCastID, settings);
                    } else {
                        this.myvideocontainer.setAttribute("visibility","visible");
                    }
                    break;
	    		case "av":
	    			videoview.broadcast(this.currentClient.broadCastID,_camera,_micro);
                    if(isInterview) {
                        canvas.videoComp_lc.send(canvas.videoComp_lc_name, "onStartBroadcast", this.currentClient.broadCastID, settings);
                    } else {
                        this.myvideocontainer.setAttribute("visibility","visible");
                    }

	    			break;
	    		case "a":
	    			videoview.broadcast(this.currentClient.broadCastID,null,_micro);
                    if(isInterview) {
                        canvas.videoComp_lc.send(canvas.videoComp_lc_name, "onStartBroadcast", this.currentClient.broadCastID, settings);
                    } else {
                        if (this.myvideocontainer.hidebyAudioOnly) {
                            this.myvideocontainer.setAttribute("visibility","hidden");
                        } else {
                            this.myvideocontainer.setAttribute("visibility","visible");
                            if (!this.myvideocontainer.minimized) {
                                this.myvideocontainer.minimize();
                            }
                        }
                    }
	    			break;
	    		case "v":
	    			videoview.broadcast(this.currentClient.broadCastID,_camera,null);
	    			if(isInterview) {
                        canvas.videoComp_lc.send(canvas.videoComp_lc_name, "onStartBroadcast", this.currentClient.broadCastID, settings);
                    } else {
                        this.myvideocontainer.setAttribute("visibility","visible");
                    }
	    			break;
	    		case "n":
	    			if ($debug) Debug.write("Do not Publish A/V");
                    //Prevent from Hiding the Box in Event Modus
                    if (canvas.thishib.modus == "conference") {
                        this.myvideocontainer.setAttribute("visibility","hidden");
                    }
	    			break;
	    		default:
	    			if ($debug) Debug.warn("no valid device Setup chosen");
	    			break;
	    	}

	        this.close();
        ]]>
    </method>

    <animator name="_chooseDeviceAnimation" start="false" attribute="y" to="40" duration="750" />

    <labelText labelid="447" fontsize="11" x="10" y="20" width="$once{ parent.width-20 }" />

    <resetCombobox fontsize="11" name="availibleSettings" x="10" y="40" width="280" editable="false">

        <switch>
            <when property="$as3">
                <passthrough>
                    import flash.net.SharedObject;
                </passthrough>
            </when>
        </switch>

        <handler name="oninit">
            <![CDATA[

                if (false) { //canvas.currentRoomObject.isAudioOnly
                    this.addItem(canvas.getLabelName(449),"a");
                    //this.addItem(canvas.getLabelName(845),"s");
                    //this.addItem(canvas.getLabelName(846),"sv");
                    this.addItem(canvas.getLabelName(451),"n");
                } else {
                	this.addItem(canvas.getLabelName(448),"av");
                    this.addItem(canvas.getLabelName(449),"a");
                    this.addItem(canvas.getLabelName(450),"v");
                    //this.addItem(canvas.getLabelName(845),"s");
                    //this.addItem(canvas.getLabelName(846),"sv");
                    this.addItem(canvas.getLabelName(451),"n");
                }

				//var r = "av";

				var t:SharedObject = SharedObject.getLocal('userdata');
				var g = t.data;
				var cam = null;
				if (g!=null){
					var cam = g["avstored"];
				}

				var tItem = this.getItem(String(cam));
				if (tItem != null) {
				    this.selectItem(String(cam));
				} else {
					this.selectItemAt(0);
				}

            ]]>
        </handler>

        <handler name="onselect">
        	<![CDATA[
        		var camVisible = "visible";
        		var micVisible = "visible";
        		var textVisible = "hidden";
	        	switch (this.getValue()){
	        		case "av":
	        			break;
	        		case "a":
	        			camVisible = "hidden";
	        			break;
	        		case "v":
	        			micVisible = "hidden";
	        			break;
	        		case "n":
	        			camVisible = "hidden";
	        			micVisible = "hidden";
	        			textVisible = "visible";
	        			break;
	        		default:
	        			if ($debug) Debug.warn("no valid device Setup chosen");
	        			break;
	        	}
                this.parent.availibleCamsLabel.setAttribute("visibility",camVisible);
                this.parent.availibleCams.setAttribute("visibility",camVisible);
                this.parent.availibleMicsLabel.setAttribute("visibility",micVisible);
                this.parent.availibleMics.setAttribute("visibility",micVisible);       
                this.parent.infoTextNoAV.setAttribute("visibility",textVisible);
                this.parent.availibleResolutionsLabel.setAttribute("visibility",camVisible);
                this.parent.availibleResolutionsWarning.setAttribute("visibility",camVisible);
                this.parent.availibleResolutions.setAttribute("visibility",camVisible);
        	]]>
        </handler>
    </resetCombobox>

    <labelText name="availibleCamsLabel" labelid="52" fontsize="11" x="10" y="80" width="$once{ parent.width-20 }" />

    <resetCombobox fontsize="11" name="availibleCams" x="10" y="100" width="280" editable="false">
        <switch>
            <when property="$as3">
                <passthrough>
                    import flash.media.Camera;
                    import flash.net.SharedObject;
                </passthrough>
            </when>
        </switch>
        <handler name="oninit">
            <![CDATA[
				//Get all availible Cam's
				var tw = Camera.names;
				var r = "";
				for (var eg=0;eg<tw.length;eg++){
					this.addItem(tw[eg],eg);
					r=eg;
				}
				var t:SharedObject = SharedObject.getLocal('userdata');
				var g = t.data;
				if (g!=null){
					var cam = g["cam"];
				} else {
					var cam = r;
				}
				if (cam=='undefined' || cam =='' || cam == null) cam=r;
				this.selectItem(String(cam));

            ]]>
        </handler>
    </resetCombobox>

    <labelText name="availibleMicsLabel" labelid="53" fontsize="11"
               x="10" y="120" width="$once{ parent.width-20 }" />

    <resetCombobox fontsize="11" name="availibleMics"  x="10" y="140" width="280" editable="false">
        <switch>
            <when property="$as3">
                <passthrough>
                    import flash.media.Microphone;
                    import flash.net.SharedObject;
                </passthrough>
            </when>
        </switch>
        <handler name="oninit">
            <![CDATA[
	            //Get all availible Mic's
	            var tw = Microphone.names;
	            var r = "";
	            for (var eg=0;eg<tw.length;eg++){
	                r=eg;
	                this.addItem(tw[eg],eg);
	            }

	            var t:SharedObject = SharedObject.getLocal('userdata');
	            var g = t.data;
	            if (g!=null){
	            	var mic = g["mic"];
	            } else {
	            	var mic = r;
	            }
				if (mic=='undefined' || mic =='' || mic ==null) mic=r;
				this.selectItem(String(mic));
            ]]>
        </handler>
    </resetCombobox>

    <labelText name="infoTextNoAV" labelid="452" multiline="true" width="280" 
               fontsize="11" x="10" y="180" visibility="hidden" />
               
    <labelText name="availibleResolutionsLabel" labelid="1429" 
            fontsize="11" x="10" y="164" width="$once{ parent.width-20 }" />
            
    <view name="availibleResolutionsWarning" x="272" y="164" 
            resource="warning_icon_popup_devices_rsc" clickable="true" >
        <labelTooltip multiline="true" labelid="1430" />
    </view>     
    
    <resetCombobox fontsize="11" name="availibleResolutions" x="10" shownitems="10"
                y="184" width="280" editable="false" >
        <!--- @keywords private -->
        <attribute name="counter" value="0" />
        <handler name="onselect" args="item">
            //if ($debug) Debug.write("onselect w ", item.cam_width);
            //if ($debug) Debug.write("onselect h ", item.cam_height);
            parent.cam_default_width = item.cam_width;
            parent.cam_default_height = item.cam_height;
        </handler>
        <textlistitem datapath="myConfigSet:/config/availableCameraResolutions/resolution" >
            <switch>
	            <when property="$as3">
	                <passthrough>
	                    import flash.net.SharedObject;
	                </passthrough>
	            </when>
	        </switch>
            <!--- @keywords private -->
            <attribute name="cam_width" value="320" type="number" />
            <!--- @keywords private -->
            <attribute name="cam_height" value="240" type="number" />
            <handler name="ondata">
                <![CDATA[
                    // if ($debug) Debug.write("ondata ", this);
                    var type = this.datapath.xpathQuery('@type');
                    this.cam_width = Number(this.datapath.xpathQuery('@width'));
                    this.cam_height = Number(this.datapath.xpathQuery('@height'));
                    this.setAttribute("text",""+this.cam_width+"x"+this.cam_height+" ["+type+"]");
                    var isDefault = this.datapath.xpathQuery('@isDefault');
                    
                    var t:SharedObject = SharedObject.getLocal('userdata');
                    var g = t.data;
                    var width = g["width"];
                    var height = g["height"];
                    if (width!=null && width > 0 && height!=null && height>0) {
                        
                        if (width == this.cam_width && height == this.cam_height) {
                            parent.selectItemAt(parent.counter);
                            parent.onselect.sendEvent(this);
                        }
                        
                    } else {
                        if (isDefault == "true") {
                            if ($debug) Debug.write("Found default one ",type);
                            parent.selectItemAt(parent.counter);
                            parent.onselect.sendEvent(this);
                        }
                    }
                    parent.counter+=1;
                ]]>
            </handler>
        </textlistitem>
    </resetCombobox>      

    <!-- Remember Me -->
    <labelCheckbox name="holddatainSO" labelid="762" x="10" y="260" >
        <switch>
            <when property="$as3">
                <passthrough>
                    import flash.net.SharedObject;
                </passthrough>
            </when>
        </switch>
        <handler name="oninit">
            var t:SharedObject = SharedObject.getLocal('userdata');
            var g = t.data;
            var save = g["savecamdata"];
            if ($debug) Debug.write("savecamdata save: ",save);
            if(save) this.setValue(true);
        </handler>
    </labelCheckbox>

    <simpleLabelButton fontsize="11" visibility="${ (parent.isInterview) ? 'visible' : 'hidden' }"
                       labelid="54" x="80" y="240" width="100">
        <handler name="onclick">
            this.parent.storelocaldata();
            this.parent.chosenCam = parent.availibleCams.getValue();
            this.parent.chosenMic = parent.availibleMics.getValue();
            this.parent.chosenSetting = parent.availibleSettings.getValue();
            this.parent.remoteMessage = new Array();
            this.parent.remoteMessage[0] = 'avsettings';
            this.parent.remoteMessage[1] = "0";
            this.parent.remoteMessage[2] = this.parent.chosenSetting;
            this.parent.getBroadCastId.doCall();
            //if ($debug) Debug.write('lc_getBroadCastId', this.parent.chosenSetting, this.parent.remoteMessage, this.parent.cam_default_width, this.parent.cam_default_height);
            //canvas.videoComp_lc.send(canvas.videoComp_lc_name, 'lc_getBroadCastId', this.parent.chosenSetting, this.parent.remoteMessage, this.parent.cam_default_width, this.parent.cam_default_height);
        </handler>
    </simpleLabelButton>

    <simpleLabelButton fontsize="11" visibility="${ (parent.isInterview) ? 'visible' : 'hidden' }"
                       labelid="918" x="190" y="240" width="100">
        <handler name="onclick">
            parent.close();
        </handler>
    </simpleLabelButton>

    <simpleLabelButton fontsize="11" visibility="${ (!parent.isInterview) ? 'visible' : 'hidden' }"
    				   labelid="54" x="190" y="240" width="100">
        <handler name="onclick">
        	this.parent.storelocaldata();
        	this.parent.chosenCam = parent.availibleCams.getValue();
        	this.parent.chosenMic = parent.availibleMics.getValue();
        	this.parent.chosenSetting = parent.availibleSettings.getValue();
			this.parent.remoteMessage = new Array();
			this.parent.remoteMessage[0] = 'avsettings';
			this.parent.remoteMessage[1] = "0";
			this.parent.remoteMessage[2] = this.parent.chosenSetting;
            this.parent.getBroadCastId.doCall();
            //if ($debug) Debug.write('lc_getBroadCastId', this.parent.chosenSetting, this.parent.remoteMessage, this.parent.cam_default_width, this.parent.cam_default_height);
            // canvas.videoComp_lc.send(canvas.videoComp_lc_name, 'lc_getBroadCastId', this.parent.chosenSetting, this.parent.remoteMessage, this.parent.cam_default_width, this.parent.cam_default_height);
        </handler>
    </simpleLabelButton>

</class>
    
</library>
